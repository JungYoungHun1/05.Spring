step10_JPA_Basic

[학습]

1. Persistence 영속성
	- 프로그램이 종료가 되더라도 사라지지 않는 데이터의 특성
	- JDBC를 통한 개발
	
	- Persistence Framework
	- JDBC 프로그래밍의 복잡함, 번거로움 없이 간단한 작업만으로 DB와 연동되는 시스템
	- 종류 : SQL Mapper, ORM
	
		- SQL Mapper
			- SQL <---> Object 필드
			- SQL 문장으로 DB 다루기
				- ex) Mybatis, JdbcTemplate, etc...
				
				
		- ORM Object-Relational Mapping
			- DB <---> Object
			- 객체를 통한 DB 다루기
			- 객체와 RDBMS 데이터를 자동으로 매핑
			- Persistence API
				ex) JPA, etc...
				
				- JPA Java Persistence API
					- Java ORM 기술에 대한 API 표준 명세
					- 구성요소
						- javax.persistence API
						- JPQL Java Persistence Query Language
						- 객체/관계 메타데이터
					- 구현체 : Hibernate, OpenJPA, etc...
					
				- Hibernate
					- JPA 구현체 중 하나
					- SQL을 직접 사용하지않음
					- 내부적으로 JDBC API 동작
					- Java Class, Property 명 제외 대소문자 구분
					
					- 장점
						- 객체 지향적인 코드를 작성 및 집중하여 개발
						- 재사용 및 유지보수에 편리성 증가
						- DBMS 종속성이 줄어듬
					- 단점
						- 의도하지 않은 쿼리가 실행 될 수 있음 - 원하지 않는 결과, 성능저하가 나타날 수 있다
						- 성능 향상을 위한 쿼리 튜닝이 필요할 경우가 있음 - 프로젝트의 복잡성이 증가하게 되면 난이도가 올라감
						
					- 영속성 컨텍스트 Persistence Context
						- 엔티티를 영구 저장하고 관리하는 고유한 환경
						- persist()
						
					- 엔티티의 상태에 따라 영속성 컨텍스트 포함 여부가 결정
						- 비영속(new/transient) : 영속성 컨텍스트와 관계가 없는 상태
						- 영속(managed) : 영속성 컨텍스트에 저장된 상태
							- 장점
								- 1차 캐시(같은 내용의 쿼리가 있다면 DB에 다시 접근할 필요 없음), 동일성 보장
								- 트랜잭션을 지원하는 쓰기 지연(쿼리를 한번에 저장했다가 마지막에 사용)
								- 변경 감지
								
						- 준영속(detached) : 영속성 컨텍스트에서 저장되었다가 분리된 상태
						- 삭제(removed) : 삭제가 된 상태
					
					
									